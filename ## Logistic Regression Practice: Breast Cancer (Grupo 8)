{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMUBGXInek8BNv0XGoW9sxI",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Ebasurtos/Machine-Learning/blob/main/%23%23%20Logistic%20Regression%20Practice%3A%20Breast%20Cancer%20(Grupo%208)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 72
        },
        "id": "E4q3_AG74zjz",
        "outputId": "362ec236-1773-4acc-8dd6-350c68fd111f"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-03726af8-0c5a-4157-aaeb-68973213c593\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-03726af8-0c5a-4157-aaeb-68973213c593\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving db_cancer.xlsx to db_cancer (1).xlsx\n"
          ]
        }
      ],
      "source": [
        "# 1. Importar librerías necesarias\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "from google.colab import files\n",
        "\n",
        "# 2. Cargar el archivo Excel\n",
        "uploaded = files.upload()\n",
        "filename = list(uploaded.keys())[0]\n",
        "data = pd.read_excel(filename)\n",
        "\n",
        "# 3. Separar variables independientes (X) y dependiente (Y)\n",
        "X = data[[\"C1\", \"C2\", \"C3\"]]\n",
        "Y = data[\"Clase\"].values  # Convertimos a array plano\n",
        "\n",
        "# 4. Normalizar los datos\n",
        "# scaler = MinMaxScaler()\n",
        "# X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# 5. Agregar columna de unos para el término de sesgo (bias)\n",
        "# X_scaled = np.insert(X_scaled, 0, 1, axis=1)  # Agrega una columna de 1s al principio\n",
        "\n",
        "# 6. Dividir datos en entrenamiento y prueba\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=104, shuffle=True)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Hipótesis (producto punto entre X y w)\n",
        "def h(x, w):\n",
        "    return np.dot(x, w.T)\n",
        "\n",
        "# Función Sigmoid\n",
        "def S(x, w):\n",
        "    return 1 / (1 + np.exp(-h(x, w)))\n",
        "\n",
        "# Función de pérdida (Binary Cross-Entropy)\n",
        "def Loss(y, y_aprox):\n",
        "    n = len(y)\n",
        "    return -(1/n) * np.sum(y * np.log(y_aprox + 1e-15) + (1 - y) * np.log(1 - y_aprox + 1e-15))  # Evita log(0)\n",
        "\n",
        "# Derivadas de la pérdida respecto a w\n",
        "def Derivatives(x, y, w):\n",
        "    n = len(y)\n",
        "    y_aprox = S(x, w)\n",
        "    return -(1/n) * np.dot((y - y_aprox).T, x)\n",
        "\n",
        "# Actualización de parámetros\n",
        "def change_parameters(w, derivatives, alpha):\n",
        "    return w - alpha * derivatives\n",
        "\n",
        "# Entrenamiento del modelo\n",
        "def training(x, y, epochs, alpha):\n",
        "    L_value = []\n",
        "    n_features = x.shape[1]\n",
        "    w = np.random.rand(n_features)\n",
        "    for i in range(epochs):\n",
        "        y_aprox = S(x, w)\n",
        "        L = Loss(y, y_aprox)\n",
        "        dw = Derivatives(x, y, w)\n",
        "        w = change_parameters(w, dw, alpha)\n",
        "        L_value.append(L)\n",
        "    return L_value, w\n"
      ],
      "metadata": {
        "id": "c7RVeO7F44S7"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Hiperparámetros\n",
        "epochs = 1000\n",
        "alpha = 0.001\n",
        "\n",
        "# Entrenamiento\n",
        "L, W = training(X_train, Y_train, epochs, alpha)\n",
        "\n",
        "# Visualizar la pérdida\n",
        "plt.plot(range(epochs), L)\n",
        "plt.xlabel(\"Epochs\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.title(\"Loss vs Epochs\")\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "KVEWPjws5Etj",
        "outputId": "4cb35c64-6c6f-4062-adad-6b07645eae56"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Evaluar con métricas: TP, TN, FP, FN\n",
        "def Testing(x_test, y_test, w):\n",
        "    y_pred_prob = S(x_test, w)\n",
        "    y_pred = (y_pred_prob >= 0.5).astype(int)\n",
        "\n",
        "    TP = np.sum((y_pred == 1) & (y_test == 1))\n",
        "    TN = np.sum((y_pred == 0) & (y_test == 0))\n",
        "    FP = np.sum((y_pred == 1) & (y_test == 0))\n",
        "    FN = np.sum((y_pred == 0) & (y_test == 1))\n",
        "\n",
        "    total = len(y_test)\n",
        "    print(f\"True Positives:  {TP} ({TP/total:.4%})\")\n",
        "    print(f\"True Negatives:  {TN} ({TN/total:.4%})\")\n",
        "    print(f\"False Positives: {FP} ({FP/total:.4%})\")\n",
        "    print(f\"False Negatives: {FN} ({FN/total:.4%})\")\n",
        "\n",
        "    results = pd.DataFrame({\n",
        "        \"Metric\": [\"True Positives\", \"True Negatives\", \"False Positives\", \"False Negatives\"],\n",
        "        \"Count\": [TP, TN, FP, FN],\n",
        "        \"Percentage\": [f\"{TP/total:.2%}\", f\"{TN/total:.2%}\", f\"{FP/total:.2%}\", f\"{FN/total:.2%}\"]\n",
        "    })\n",
        "    return results\n",
        "\n",
        "# Mostrar resultados\n",
        "results_table = Testing(X_test, Y_test, W)\n",
        "print(\"\\nResults Summary:\\n\", results_table)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tcXn5OF95KIy",
        "outputId": "96bd5213-c863-48bc-c624-0576ea465725"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True Positives:  71 (77.1739%)\n",
            "True Negatives:  2 (2.1739%)\n",
            "False Positives: 16 (17.3913%)\n",
            "False Negatives: 3 (3.2609%)\n",
            "\n",
            "Results Summary:\n",
            "             Metric  Count Percentage\n",
            "0   True Positives     71     77.17%\n",
            "1   True Negatives      2      2.17%\n",
            "2  False Positives     16     17.39%\n",
            "3  False Negatives      3      3.26%\n"
          ]
        }
      ]
    }
  ]
}